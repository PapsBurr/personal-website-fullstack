name: Deploy Frontend and Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy-frontend:
        description: 'Deploy Frontend'
        type: boolean
        default: true
      deploy-backend:
        description: 'Deploy Backend'
        type: boolean
        default: true
      force-deploy:
        description: 'Force deploy (ignore change detection)'
        type: boolean
        default: false

env:
  NODE_VERSION: "20"
  AWS_REGION: "us-east-1"

jobs:
  # Job 1: Detect Changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  # Job 2: Test Backend (runs if backend changed)
  test-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./backend/package-lock.json

      - name: Install backend dependencies
        run: npm ci --include=dev
        env:
          NODE_ENV: development  # Override the production setting

      - name: Run backend tests
        run: npm test -- --coverage
        env:
          NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
          NODE_ENV: test
          CI: true

  # Job 3: Test Frontend (runs if frontend changed)
  test-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies and build cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false

  # Job 4: Deploy Frontend to S3
  deploy-frontend:
    needs: [detect-changes, test-frontend]
    if: |
      always() && 
      needs.detect-changes.outputs.frontend-changed == 'true' && 
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies and build cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./out s3://${{ secrets.S3_BUCKET_NAME }} --delete
          # If using CloudFront, invalidate cache
          if [ ! -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi

  # Job 5: Deploy Backend with SAM
  deploy-backend:
    needs: [detect-changes, test-backend]
    if: |
      always() && 
      needs.detect-changes.outputs.backend-changed == 'true' && 
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    env:
      NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
      BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./backend/package-lock.json

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install backend dependencies
        run: npm ci

      - name: SAM Build
        run: sam build

      - name: SAM Deploy
        run: |
          sam deploy --stack-name personal-website-backend-v2 --no-confirm-changeset --parameter-overrides \
          "NasaApiKey=${{ secrets.NASA_API_KEY }}" \
          "BaseUrl=${{ secrets.NEXT_PUBLIC_BASE_URL }}"

  # Job 6: Notify Success
  notify-success:
    needs: [deploy-frontend, deploy-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "Frontend deployed successfully"
          fi
          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "Backend deployed successfully"
          fi
