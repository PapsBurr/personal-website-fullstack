AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

# Input Parameters
Parameters:
  NasaApiKey:
    Type: String
    Description: NASA API Key for APOD service
    NoEcho: true

  DomainName:
    Type: String
    Description: Domain name for the website
    Default: nathanpons.com

  CertificateArn:
    Type: String
    Description: ACM Certificate ARN for CloudFront custom domain
    Default: arn:aws:acm:us-east-1:242201278004:certificate/9c91f042-e116-41be-9c24-95dc5876b0d8

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  WwwRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub "${AWS::StackName}-www-redirect"
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var host = request.headers.host.value;

          if (host === 'www.nathanpons.com') {
            return {
              statusCode: 301,
              statusDescription: 'Moved Permanently',
              headers: {
                "location": { "value": "https://nathanpons.com" + request.uri }
              }
            };
          }
          return request;
        }
      FunctionConfig:
        Comment: Redirect www to non-www
        Runtime: cloudfront-js-1.0

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

        Aliases:
          - !Ref DomainName
          - !Sub "www.${DomainName}"

        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

        Origins:
          - Id: frontend-origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""

          - Id: backend-origin
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

        DefaultCacheBehavior:
          TargetOriginId: frontend-origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref WwwRedirectFunction

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: backend-origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # Managed-AllViewer
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE

        Enabled: true
        DefaultRootObject: index.html

  ExpressApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 30
      ImageConfig:
        Command: ["server.handler"]

      Environment:
        Variables:
          NASA_API_KEY: !Ref NasaApiKey
          NODE_ENV: production
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./
      Dockerfile: Dockerfile

Outputs:
  WebsiteURL:
    Description: Your website URL
    Value: !Sub "https://${DomainName}"

  FrontendBucketName:
    Description: S3 bucket for frontend uploads
    Value: !Ref FrontendBucket

  CloudFrontDistributionDomain:
    Description: CloudFront distribution domain
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
